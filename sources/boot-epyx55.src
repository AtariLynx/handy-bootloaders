; Wednesday 11-Apr-90 14:22:47
* === boot.src ==============================================================
* 
* Handy Boot Code Main Routine  -  Handy ROM
* 
* Confidential and Proprietary
* Copyright (C) 1989, Epyx, Inc.
* 
* Date		Name		Description
* ---------	--------------	----------------------------------------------
* 10-Apr-90	SHL		Rewritten for smaller size, improved speed,
*				and larger cartridge support
* 20-Feb-90	SHL		Fixed bug causing ROM power to be disabled
*				during reads
* 23 May 89	=RJ Mical=	Created this file!
* 
* ===========================================================================



;DEBUG		.EQ 1
;BUILDCHECK	.EQ 1

	#IFNDEF DEBUG
	  #IFNDEF BUILDCHECK
REAL_VERSION .EQ 1
	  #ENDIF
	#ENDIF




* ===========================================================================

	.LIST OFF

		.IN harddefs.i

	.LIST ON

		.IN romsize.i
		.IN cartdefs.i

	#IF ROMPAGESIZE <512
	  .ECHO ""
	  .ECHO "ERROR:  This file not set up to handle page size < 512"
	  .ECHO ""
	  .END
	#ENDIF

	#IFNDEF ROM_SCREENBLANK_VALUE
ROM_SCREENBLANK_VALUE	.EQ 0
	#ENDIF



* ===========================================================================

HASH_COUNT	.EQ 2
NUMSHUFFLES	.EQ 8
BUFFERLENGTH	.EQ 32	; 256 bits
RESULTLENGTH	.EQ BUFFERLENGTH/2	; 128 bits

SIZEKEY		.EQ 50

BASE_ORG	.EQ $0200
CHECK_ORG	.EQ BASE_ORG+SIZEKEY*5-RESULTLENGTH-1
BASE2_ORG	.EQ $0300
CHECK2_ORG	.EQ BASE2_ORG+SIZEKEY*5-1
DISPLAY_ORG	.EQ $0400	; Must be $xx00

ENDADDRESS	.EQ DISPLAY_ORG+$2000


SETCARTBLOCK	.EQ $FE00
RSA_LOAD	.EQ $FE4A



* ===========================================================================
* ===                       =================================================
* ===  Zero-Page Variables  =================================================
* ===                       =================================================
* ===========================================================================

		.OR $0000

* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
* These are the variables as declared by the Mikey ROM code

* Note!  Dest is presumed to be at memory location zero
Dest		.DS	2

checksum	.ds 1		; checksum used during decryption

powerdowncount	.DS 2

ptr		.ds 2
num_blocks	.ds 1

bitcount	.DS 1		; temporary counter
bytecount	.DS 1		; temporary counter
temp0		.DS 1
acc0		.DS 2		; accumulator pointers
acc1		.DS 2
input1		.DS 2		; pointer to multiplicand
scratch0	.DS SIZEKEY	; scratch areas must be in zero page
scratch1	.DS SIZEKEY
scratch2	.DS SIZEKEY
inputcode	.DS SIZEKEY
encrypted_area	.EQ inputcode

* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

		.OR $0000

tickler		.DS 1

ERASE_START

buffer0		.DS BUFFERLENGTH
buffer1		.DS BUFFERLENGTH


ERASE_END

random		.DS 1
random1		.DS 1
random2		.DS 1
count		.DS 2

var46		.DS 1 ; directory+ROMDIR_DEST
var47		.DS 1 ; directory+ROMDIR_DEST+1
var48		.DS 1 ; directory+ROMDIR_SIZE
var49		.DS 1 ; directory+ROMDIR_SIZE+1

directory	.DS ROMDIR_ENTRY_SIZE

;hashpage	.DS 1 ; 52
hashsubpage	.DS 1 ; 52
hashloop	.DS 1 ; 53

; skipcount2	.DS 1

* ===========================================================================
* ===========================================================================

	#MACRO ECHO_VALUE
		.ECHO "Value of ?0 is ?%d0 ($?%x0)"
	#ENDMACRO


* ===========================================================================
* ===========================================================================

		.OR BASE_ORG
		.RU *

	#IFDEF REAL_VERSION
* Have the ROM load up RSA-encoded stuff starting at BASE2_ORG

		;-- This branch is here to allow the RSA decoding of a second
		;-- block of data.  After the RSA, the ROM code jumps to
		;-- BASE_ORG.  After the first RSA, this safe branch 
		;-- is taken.  Then the branch offset is later modified to 
		;-- skip the loading and RSA'ing of the second page
		BRA .10		; self mod
.10

		JSR ClearPalette

		;-- Set up the RSA pointer to the decode destination
		STZ ptr
		LDA #>BASE2_ORG
		STA ptr+1

		JMP RSA_LOAD
bootContinue
	#ELSE
		stz MAPCTL	; force Mikey to be in memory
		lda #3		; set IODIR the way Mikey ROM does
		sta IODIR
	#ENDIF ; of #IFDEF REAL_VERSION

        LDA #1
        JSR PrepareShiftRegister
        JSR copydir
        LDA directory+ROMDIR_DEST
        CLC
        ADC #32
        STA SCBNEXTL
		LDA directory+ROMDIR_DEST+1
        ADC #0
        STA SCBNEXTH

		;-- Initialize and fire off the sprite engine
		LDX #SETVALS_COUNT-1
.B0		  LDA SuzyValues,X
		  LDY SuzyOffsets,X
		  STA $FC00,Y		; SUZY lives at $FC00
		  DEX
		bpl .B0		; X will exit with zero

		;-- Catch a snooze, letting Suzy drive the bus
		STZ CPUSLEEP

* Note:  I'm not clearing Suzy's Done-Acknowledge flag.  This presumes that
* all programs will clear it before starting, which all good programs do
;???		STZ SDONEACK

		;-- Copy the palette to the hardware registers
		LDY #31
.50		  LDA (directory+ROMDIR_DEST),Y
		  STA GREEN0,Y
		  DEY
		 BPL .50

		;-- Alright, finally display this picture
		STZ DISPADRL		; this is true from MIKEY ROM
		LDA #>DISPLAY_ORG
		STA DISPADRH

MakeSbox
* Check that the data is good
* Perform the oneway hash function on the data and check that
* the result matches the signature.  
* If the signature matches, the routine returns.  If not, it loops forever.

* Make sbox, the special 256 byte permutation table.
* The table will have values from 0 to 255 all shuffled around

		;-- Initialize the poly-counter random number
		LDA #$12
		STA random
		LDA #$47	; pre-initialized variables
		STA random1
		LDA #$39
		STA random2

		;-- Initialize sbox with values from 0 to 255
		LDX #0		; X = zero from above
.0		  TXA
		  STA sbox,X
		  INX
		BNE .0

		;-- For NUMSHUFFLES times, pass through the entire array, 
		;-- swapping the nth entry with a random entry

		;-- Do once pass through sbox, swapping entries
;		LDX #0		; X = zero from above

		;-- Get a random index, use it to swap the X'th sbox entry
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
* Polynomial count pseudo-random generator, period 2**24-2
.2		    LDA random
		    LSR a
		    LSR a
		    SBC random
		    LSR a
		    ROL random1
		    ROL random2
		    ROR random
			CLC
		    LDA random
		    ADC random1
		    EOR random2
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

		    TAY			; Use this as the swap index
		    LDA sbox,X		; and do the swap
		     PHA
		      LDA sbox,Y
		      STA sbox,X
		     PLA
		    STA sbox,Y
	
		    INX
		   BNE .2

		  DEC sboxloop
		 BNE .2

* ===========================================================================

; TODO: Find original code
		ldy #$01
		JSR checksum
		LDA #$d0
		STA $0372		; Modify $372 from BPL $0365 to BNE $0365
		LDY #$81
		LDA #$02
		STA $03F8
		JSR checksum

terminate
		;-- OK, hash string created.  
		;-- If we're building the checkstring, then break here
		;-- else check the hash with the required value
	#IFDEF BUILDCHECK
		.BY $13
		BRK
	#ELSE 
		LDX #RESULTLENGTH-1	; Check final result to see 
check	LDA buffer0,X		; if it checks out
		CMP checkstring,X	; If value isn't equal
fail	BNE fail		    ; loop here for a really long time
		DEX
		BPL check

* Hash checks out OK!
* Clear the display to a shade of grey, then load and execute file 1

		JSR ClearPalette

    	LDA #1
        JSR PrepareShiftRegister
        LDX #$f7
        LDY #$ff
        JSR SetCartOffset
        JSR copydir

        JMP (directory+ROMDIR_DEST)
	#ENDIF


* ===========================================================================
* ===                      ==================================================
* ===  Page 1 Subroutines  ==================================================
* ===                      ==================================================
* ===========================================================================

* ===========================================================================

SetCartOffset
		inx
        bne SetCartOffsetLoop
        iny
        bne SetCartOffsetLoop
        RTS

SetCartOffsetLoop
        lda RCART_0
        bra SetCartOffset

ClearPalette
* ===========================================================================
		ldy #31		; clear palette to black
        lda #0
.50		  sta GREEN0,y
		  dey
		BPL .50

		;-- Turn off serial noise as early as possible
		LDA #TXOPEN
		STA SERCTL

	#IFDEF REAL_VERSION
;TEMP		;-- Set up the return branch 
		LDA #bootContinue-BASE_ORG-2
		STA BASE_ORG+1			; Self-modify 
	#ENDIF ; of #IFDEF REAL_VERSION

		RTS

PrepareShiftRegister
        JSR SETCARTBLOCK
        LDA #RESTLESS+AUDIN_BIT
        STA IODAT

        RTS

    .BY 0, 0


* ===========================================================================

	#IFDEF REAL_VERSION

free1 .= CHECK_ORG-*

	  ECHO_VALUE free1

		.OR CHECK_ORG
	#ENDIF

checkstring
		.IN checkstring.src ; Must be exactly RESULTLENGTH bytes long

    	.BYTE	0, 0, 0, 0, 0, 0


	#IFDEF REAL_VERSION
* Last byte must be zero
		.BYTE	0
		.TF boot2.bin
		.OR BASE2_ORG
	#ENDIF

* ===========================================================================
* ===========================================================================
* ===========================================================================


* ===========================================================================
* ===                      ==================================================
* ===  Page 2 Subroutines  ==================================================
* ===                      ==================================================
* ===========================================================================

copydir
		ldx #0
.00		  lda RCART_0
		  sta directory,x
		  inx
    	  cpx #ROMDIR_ENTRY_SIZE
		bcc .00

    	lda directory+ROMDIR_SIZE
    	eor #$ff
    	sta directory+ROMDIR_SIZE
    	lda directory+ROMDIR_SIZE+1
    	eor #$ff
    	sta directory+ROMDIR_SIZE+1
	
    	lda directory+ROMDIR_DEST
    	sta var46
    	lda directory+ROMDIR_DEST+1
    	sta var47

ReadFile
* ===========================================================================

setCartAddress
		;-- Set the cart address to the data of this file
		lda directory+ROMDIR_PAGE
		jsr PrepareShiftRegister

        lda directory+ROMDIR_OFFSET
        eor #$ff
		tax
        lda directory+ROMDIR_OFFSET+1
        eor #$ff
        tay
        jsr SetCartOffset
		
		lda #$ff
		sec			; get complement of bytes remaining in page
		sbc directory+ROMDIR_OFFSET		
		eor #$ff
		tax
		lda #1
		sbc directory+ROMDIR_OFFSET+1
		eor #$ff
		tay

readDataLoop	;-- While there's still data to read, do the loop
		inc directory+ROMDIR_SIZE
		BNE .10
		inc directory+ROMDIR_SIZE+1
		BEQ dataDone
.10
        JSR readByte

		;-- Bump the cart page offset counter
.20		INX
		BNE readDataLoop
		INY
		BNE readDataLoop

		;-- Reached end of page, so go to next
		INC directory+ROMDIR_PAGE

		;-- Indicate that there's a whole page to read
		STZ directory+ROMDIR_OFFSET
		STZ directory+ROMDIR_OFFSET+1
		BRA setCartAddress

dataDone	RTS

; TODO: Pretty up and find original source
checksum
		STZ var46
		STZ var48
		LDA #$24
		STA var47
		STA var49
.21		TYA
		JSR PrepareShiftRegister
		LDX #0
.30		JSR readByte		; Read data
		INX
		BNE .30
		INY
		BPL .21

LoadAndHash
* ===========================================================================
* Loads 256 bytes from the page specified in Y, hashes page into the buffer
* 
* ON ENTRY:
*   - Y defines cart page to be loaded
*   - hashcontrol defines the number of passes for the check

		ldx #BUFFERLENGTH-1
.10	  	stz buffer0,x	; start off initializing buffer0
	  	  dex
		bpl .10

.f0
		lda JOYSTICK		; clear screen if user pressed stick
		beq .f1
		jsr ClearPalette

* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
* Do the actual hash of the current buffer

.f1	    LDA hashcount
	    STA hashloop

; TODO: Pretty up code
		LDY #$0F
.f2		LDA (var48),y
		STA $0011,y
		DEY
		BPL .f2

	    LDX #BUFFERLENGTH	; Exclusive-or with original buffer, 
.f3	      LDA buffer0-1,X	; and copy back over first n bytes
	      STA buffer1-1,X
	      DEX
	    BNE .f3

* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
* Do the actual hash of the current buffer

		TXA			; initialize A to zero
		STZ tickler
.1		LDX #BUFFERLENGTH-1	; Count through buffer
.0		CLC
		ADC buffer1,X
		STA buffer1,X
		CLC
		ADC tickler
		TAY
		LDA sbox,Y
		INC tickler
		DEX
	       BPL .0
	      DEC hashloop
	     BNE .1

* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
		CLC
		ADC $40
		STA $40
		LDX #RESULTLENGTH
.2		LDA buffer0-1,x
		EOR buffer1-1,x
		STA buffer0-1,x		
		DEX
		BNE .2
		LDA var48
		CLC
		ADC #$10
		STA var48
		BCC .4
		INC var49
.4		CMP #$00
		LDA var49
		SBC #$A3
		BCC .f0		; Next hash page?		
		RTS		

* ===========================================================================
* ===========================================================================

readByte	
		;-- Get the next byte and bump the RAM address
		LDA RCART_0
		STA (var46)
		INC var46
		BNE .20
		INC var46+1
.20     RTS

SuzyValues
		.BYTE $01
		.BYTE $7F		; almost any value $0000-$00ff will do
		.BYTE $7F
		.BYTE >DISPLAY_ORG
		.BYTE <DISPLAY_ORG	; should be left from MIKEY ROM
		.BYTE $20		; set NO_COLLIDE in SPRSYS
		.BYTE $01
		.BYTE $00
		.BYTE $00

SuzyOffsets
		.BYTE <SPRGO
		.BYTE <HSIZOFFL
		.BYTE <VSIZOFFL
		.BYTE <VIDBASH
		.BYTE <VIDBASL		; should be left from MIKEY ROM
		.BYTE <SPRSYS		; set NO_COLLIDE in SPRSYS
		.BYTE <SUZYBUSEN
		.BYTE <HOFFL
		.BYTE <VOFFL

SETVALS_COUNT	.EQ *-SuzyOffsets	; number of values to INIT in loop

* ===========================================================================
* ===                       =================================================
* ===  Preinitialized Data  =================================================
* ===                       =================================================
* ===========================================================================

sboxloop	.BY NUMSHUFFLES		; initialized variable
hashcount	.BY 4

* ===========================================================================
* ===========================================================================
* ===========================================================================


* Last byte must be zero
	#IFDEF REAL_VERSION
free2	.= CHECK2_ORG-*

	  ECHO_VALUE free2

free	.= free1+free2

	  ECHO_VALUE free

		.OR CHECK2_ORG
		.BYTE	0
nextfree .= SIZEKEY-free

	#ELSE
	  #IF * > $0400
		.ECHO ""
		.ECHO "HEY:  GOES GREATER THAN $0400"
		.ECHO ""
temp .= *-$0400
	  #ENDIF
	#ENDIF ; of #IFDEF REAL_VERSION


* ===========================================================================
; TODO: Figure out ENDADDRESS to A300
;		.OR ENDADDRESS
		.OR $A300
sbox	.DS $100
